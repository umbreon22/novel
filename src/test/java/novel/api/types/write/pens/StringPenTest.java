package novel.api.types.write.pens;

import novel.api.types.write.writers.BoolDataWriter;
import novel.api.types.write.writers.StringDataWriter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class StringPenTest extends PenTest {

    @Test
    void stringsTest() {
        String[] data = {"0", "1", "2"};
        var singlePen = newPen();
        for(var d : data) singlePen.strings(d);

        var varArgsPen = newPen();
        varArgsPen.strings(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.strings(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(
            data, (DataPen<?> pen, String[][] strings) -> pen.strings(strings)
        ).queue();
        assertClonedMatrixEqualsSource(
            data,
            matrixPenQueue
        );
    }


    @Test
    void toStringsTest() {
        Object[] data = {
            newToString("ugh"), newToString("1"), newToString("2")
        };
        var singlePen = newPen();
        singlePen.strings(data);
        List<String> dataToString = collectAsToString(Arrays.stream(data));
        List<String> writtenToString = collectAsToString(singlePen.queue().stream());
        Assertions.assertEquals(dataToString, writtenToString);

        var matrixPenQueue = writeClonedMatrix(
            data, (DataPen<?> pen, Object[][] objects) -> pen.strings(objects)
        ).queue();
        assertClonedMatrixEqualsSource(
            dataToString,
            matrixPenQueue
        );
    }

    private List<String> collectAsToString(Stream<Object> stream) {
        return stream.map(Object::toString).collect(Collectors.toList());
    }

    private Object newToString(String s) {
        return new Object(){
            @Override
            public String toString() {
                return s;
            }
        };
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of("hello", "world"), StringPen::strings);
    }

    @Test
    void testDataWriter() {
        String[] data = {"a", "aa", "aaa"};
        StringDataWriter dataWriter = (pen, s) -> pen.strings(s+s);
        List<String> transformedData = Stream.of("a", "aa", "aaa", "aaaa")//not worth it
                                              .map(s->s+s)
                                              .collect(Collectors.toList());
        var result = newPen().strings(data, dataWriter).strings("aaaa", dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }
}
