package novel.api.types.write.pens;

import novel.api.types.write.writers.FloatDataWriter;
import novel.internal.testutil.DataPenQueue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class FloatPenTest extends PenTest {
    @Test
    void floatsTest() {
        float[] data = {1f, 2f, 3f};
        var singlePen = newPen();
        for(var d : data) singlePen.floats(d);

        var varArgsPen = newPen();
        varArgsPen.floats(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.floats(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(data, FloatPen::floats).queue();
        assertClonedMatrixEqualsSource(
            boxedArray(data),
            matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of(100f, 69f), DataPenQueue::floats);
    }

    @Test
    void testDataWriter() {
        int[] data = {1, 2, 3};
        FloatDataWriter dataWriter = (pen, i) -> pen.floats((float)(i*2));
        float[] floatData = new float[data.length];
        for(int i = 0; i < data.length; i++) {
            //no float streams java :)
            floatData[i] = (float) data[i];
        }
        List<Float> transformedData = IntStream.of(data)
                                               .boxed()
                                               .map(i->i*2)
                                               .map(Integer::floatValue)
                                               .collect(Collectors.toList());
        transformedData.add((float) (4*2));
        var result = newPen().floats(floatData, dataWriter).floats(4, dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }
}
