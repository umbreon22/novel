package novel.api.types.write.pens;

import novel.api.types.write.writers.BoolDataWriter;
import novel.internal.testutil.DataPenQueue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class BoolPenTest extends PenTest {

    @Test
    void boolsTest() {
        boolean[] data = {true, false};
        var singlePen = newPen();
        for(var d : data) singlePen.bools(d);

        var varArgsPen = newPen();
        varArgsPen.bools(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.bools(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(data, DataPen::bools).queue();
        assertClonedMatrixEqualsSource(
                boxedArray(data),
                matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of(true, false), DataPenQueue::bools);
    }

    @Test
    @Override
    void testStreams() {
        Assertions.fail("Not yet implemented.");
    }

    @Test
    void testDataWriter() {
        boolean[] data = {true, true, false};
        BoolDataWriter dataWriter = (pen, b) -> pen.bools(!b);
        List<Boolean> transformedData = Stream.of(true, true, false, true)//not worth it
                                              .map(b->!b)
                                              .collect(Collectors.toList());
        var result = newPen().bools(data, dataWriter).bools(true, dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }
}
