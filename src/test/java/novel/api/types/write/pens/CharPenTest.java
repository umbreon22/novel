package novel.api.types.write.pens;

import novel.api.types.write.writers.CharDataWriter;
import novel.internal.testutil.DataPenQueue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class CharPenTest extends PenTest {

    @Test
    void charsTest() {
        char[] data = {'a', 'b', 'c'};
        var singlePen = newPen();
        for(var d : data) singlePen.chars(d);

        var varArgsPen = newPen();
        varArgsPen.chars(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.chars(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(data, DataPen::chars).queue();
        assertClonedMatrixEqualsSource(
            boxedArray(data),
            matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of('a', 'b'), DataPenQueue::chars);
    }

    @Test
    @Override
    void testStreams() {
        testObjectStreams(()->Stream.of('a', 'b', 'c'), DataPenQueue::chars);
    }

    @Test
    void testDataWriter() {
        char[] data = {'a', 'b', 'c'};
        CharDataWriter dataWriter = (pen, c) -> pen.chars((char)(c+1));
        List<Character> transformedData = Stream.of('a', 'b', 'c', 'd')//not worth it
                                                .map(c->(char)(c+1))
                                                .collect(Collectors.toList());
        var result = newPen().chars(data, dataWriter).chars('d', dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }

}
