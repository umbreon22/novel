package novel.api.types.write.pens;

import novel.api.types.write.writers.ByteDataWriter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class BytePenTest extends PenTest {

    @Test
    void bytesTest() {
        byte[] data = {0, 1, 2};
        var singlePen = newPen();
        for(var d : data) singlePen.bytes(d);

        var varArgsPen = newPen();
        varArgsPen.bytes(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.bytes(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(
            data, BytePen::bytes
        ).queue();

        assertClonedMatrixEqualsSource(
            boxedArray(data),
            matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of((byte)0, (byte)1), BytePen::bytes);
    }
    
    @Test
    void testDataWriter() {
        byte[] data = {1, 2, 3};
        ByteDataWriter dataWriter = (pen, i) -> pen.bytes((byte)(i*2));
        List<Byte> transformedData = Stream.of(1, 2, 3, 1)//not worth it
                                           .map(i->i*2)
                                           .map(Integer::byteValue)
                                           .collect(Collectors.toList());
        var result = newPen().bytes(data, dataWriter).bytes((byte)1, dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }
}
