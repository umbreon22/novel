package novel.api.types.write.pens;

import novel.api.types.write.writers.IntDataWriter;
import novel.api.types.write.writers.LongDataWriter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class LongPenTest extends PenTest {
    @Test
    void longsTest() {
        long[] data = {0L, 1L, 2L};
        var singlePen = newPen();
        for(var d : data) singlePen.longs(d);

        var varArgsPen = newPen();
        varArgsPen.longs(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.longs(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(data, DataPen::longs).queue();
        assertClonedMatrixEqualsSource(
            Arrays.stream(data).boxed().toArray(),
            matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of(100L, 69L), LongPen::longs);
    }

    @Test
    void testDataWriter() {
        long[] data = {1, 2, 3};
        LongDataWriter dataWriter = (pen, i) -> pen.longs(i*2);
        List<Long> transformedData = Arrays.stream(data)
                                              .map(i->i*2)
                                              .boxed()
                                              .collect(Collectors.toList());
        transformedData.add((long) (4*2));
        var result = newPen().longs(data, dataWriter).longs(4, dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }

}
