package novel.api.types.write.pens;

import novel.api.types.write.writers.ShortDataWriter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class ShortPenTest extends PenTest {

    @Test
    void shortsTest() {
        short[] data = {1, 2, 3};
        var singlePen = newPen();
        for(var d : data) singlePen.shorts(d);

        var varArgsPen = newPen();
        varArgsPen.shorts(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.shorts(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(data, ShortPen::shorts).queue();
        assertClonedMatrixEqualsSource(
            boxedArray(data),
            matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of((short)12345, Short.MAX_VALUE), ShortPen::shorts);
    }
    
    @Test
    void testDataWriter() {
        int[] data = {1, 2, 3};
        ShortDataWriter dataWriter = (pen, i) -> pen.shorts((short)(i*2));
        short[] shortData = new short[data.length];
        for(int i = 0; i < data.length; i++) {
            //no short streams java :)
            shortData[i] = (short) data[i];
        }
        List<Short> transformedData = IntStream.of(data)
                                               .boxed()
                                               .map(i->i*2)
                                               .map(Integer::shortValue)
                                               .collect(Collectors.toList());
        transformedData.add((short) (4*2));
        var result = newPen().shorts(shortData, dataWriter).shorts((short)4, dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }
}
