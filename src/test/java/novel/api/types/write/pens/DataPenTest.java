package novel.api.types.write.pens;

import novel.api.types.write.AutoWriteable;
import novel.api.types.write.writers.ObjectDataWriter;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;

public class DataPenTest extends PenTest {

    @Test
    void objectsTest() {
        AutoWriteable[] data = {a->a.ints(1), b->b.strings(2), c->c.longs(3,4)};
        var singlePen = newPen();
        for(var d : data) singlePen.objects(d);

        var varArgsPen = newPen();
        varArgsPen.objects(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.objects(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        Collection<Object> mockFlattenedMatrix = new LinkedList<>();
        for(var ignored : data) {
            mockFlattenedMatrix.addAll(singlePen.queue());
        }

        var matrixPenQueue = writeClonedMatrix(data, DataPen::objects).queue();
        assertClonedMatrixEqualsSource(
            boxedArray(mockFlattenedMatrix.toArray()),
            matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        List<? extends AutoWriteable> autoWriteables = List.of(
            a->a.ints(1), b->b.strings(2), c->c.longs(3,4)
        );
        var evaluatePen = newPen();
        autoWriteables.forEach(evaluatePen::objects);

        var queue = newPen().objects(autoWriteables).queue();
        Assertions.assertEquals(evaluatePen.queue(), queue);
    }

    @Test
    void testBiConsumerButNotReallyBiConsumer() {
        ObjectDataWriter<Integer> shortIntWriter = (pen, i) -> pen.shorts(i::shortValue);
        Integer[] inputArray = new Integer[]{
                1, 2, (int) Short.MAX_VALUE, Short.MAX_VALUE * 2, Integer.MAX_VALUE
        };
        List<Integer> inputIntegers = Arrays.stream(inputArray)
                                            .collect(Collectors.toList());
        List<Short> expectedAsShorts = inputIntegers.stream()
                                                    .map(Integer::shortValue)
                                                    .collect(Collectors.toCollection(LinkedList::new));
        var arrayQueue = newPen()
                .objects(inputArray, shortIntWriter)
                .queue();
        Assertions.assertEquals(expectedAsShorts, arrayQueue);
        var iterableQueue = newPen()
                .objects(inputIntegers, shortIntWriter)
                .queue();
        Assertions.assertEquals(expectedAsShorts, iterableQueue);

        var gimmieFour = newPen().objects("hewwo", (p,s)->p.ints(4)).queue();
        Assertions.assertEquals(List.of(4), gimmieFour);
    }

}
