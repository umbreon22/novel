package novel.api.types.write.pens;

import novel.api.types.write.AutoWriteable;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

public class DataPenTest extends PenTest {

    @Test
    void objectsTest() {
        AutoWriteable[] data = {a->a.ints(1), b->b.strings(2), c->c.longs(3,4)};
        var singlePen = newPen();
        for(var d : data) singlePen.objects(d);

        var varArgsPen = newPen();
        varArgsPen.objects(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.objects(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        Collection<Object> mockFlattenedMatrix = new LinkedList<>();
        for(var ignored : data) {
            mockFlattenedMatrix.addAll(singlePen.queue());
        }

        var matrixPenQueue = writeClonedMatrix(data, DataPen::objects).queue();
        assertClonedMatrixEqualsSource(
            boxedArray(mockFlattenedMatrix.toArray()),
            matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        List<AutoWriteable> autoWriteables = List.of(
            a->a.ints(1), b->b.strings(2), c->c.longs(3,4)
        );
        var evaluatePen = newPen();
        autoWriteables.forEach(evaluatePen::objects);

        var queue = newPen().objects(autoWriteables).queue();
        Assertions.assertEquals(evaluatePen.queue(), queue);
    }

}
