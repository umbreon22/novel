package novel.api.types.write.pens;

import novel.api.types.write.writers.IntDataWriter;
import novel.internal.testutil.DataPenQueue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class IntPenTest extends PenTest {

    @Test
    void intsTest() {
        int[] data = {1, 2, 3};
        var singlePen = newPen();
        for(var d : data) singlePen.ints(d);

        var varArgsPen = newPen();
        varArgsPen.ints(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.ints(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(data, IntPen::ints).queue();
        assertClonedMatrixEqualsSource(
                Arrays.stream(data).boxed().toArray(),
                matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of(100, 69), DataPenQueue::ints);
    }

    @Test
    @Override
    void testStreams() {
        Supplier<Stream<Integer>> streamSupplier = () -> Stream.of(100, 69, Integer.MAX_VALUE, 696969696);
        testNumberStreams(streamSupplier, DataPenQueue::ints);

        IntDataWriter plusOne = (p, i) -> p.ints(i+1);
        BiConsumer<Number, Number> assertPlusOne = (a, b) -> Assertions.assertEquals(0, Integer.compare(a.intValue() + 1, b.intValue()));
        testNumberStreams(streamSupplier, (p, i) -> p.ints(i, plusOne), assertPlusOne);

        Supplier<IntStream> intStreamSupplier = () -> IntStream.of(100, 69, Integer.MAX_VALUE, 696969696);
        testNumberStreams(intStreamSupplier, DataPenQueue::ints);
        testNumberStreams(intStreamSupplier, (p, i) -> p.ints(i, plusOne), assertPlusOne);
    }

    @Test
    void testDataWriter() {
        int[] data = {1, 2, 3};
        IntDataWriter intDataWriter = (pen, i) -> pen.ints(i*2);
        List<Integer> transformedData = Arrays.stream(data)
                                              .map(i->i*2)
                                              .boxed()
                                              .collect(Collectors.toList());
        transformedData.add(4*2);
        var result = newPen().ints(data, intDataWriter).ints(4, intDataWriter).queue();
        Assertions.assertEquals(transformedData, result);
        List<Integer> boxedList = Arrays.stream(data).boxed().collect(Collectors.toList());
        var resultIer = newPen().ints(boxedList, intDataWriter).ints(4, intDataWriter).queue();
        Assertions.assertEquals(transformedData, resultIer);
    }

}
