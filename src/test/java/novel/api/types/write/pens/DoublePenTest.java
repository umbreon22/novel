package novel.api.types.write.pens;

import novel.api.types.write.writers.DoubleDataWriter;
import novel.internal.testutil.DataPenQueue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.List;
import java.util.Queue;
import java.util.function.BiConsumer;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.Stream;

public class DoublePenTest extends PenTest {
    @Test
    void doublesTest() {
        double[] data = {1d, 2d, 3d};
        var singlePen = newPen();
        for(var d : data) singlePen.doubles(d);

        var varArgsPen = newPen();
        varArgsPen.doubles(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.doubles(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());

        var matrixPenQueue = writeClonedMatrix(data, DataPen::doubles).queue();
        assertClonedMatrixEqualsSource(
                Arrays.stream(data).boxed().toArray(),
                matrixPenQueue
        );
    }

    @Test
    @Override
    void testIterable() {
        testIterable(List.of(100d, 69d), DataPenQueue::doubles);
    }

    @Test
    @Override
    void testStreams() {
        Supplier<Stream<Double>> streamSupplier = () -> Stream.of(100d, 69d);
        testNumberStreams(streamSupplier, DataPenQueue::doubles);
        Supplier<DoubleStream> doubleStreamSupplier = () -> DoubleStream.of(100d, 69d);
        testNumberStreams(doubleStreamSupplier, DataPenQueue::doubles);

        BiConsumer<Double, Double> assertPlusOne = (a, b) -> Assertions.assertEquals(a + 1, b);
        DoubleDataWriter writePlusOne = (DoublePen p, double d) -> p.doubles((double)(d+1));
        testNumberStreams(streamSupplier, (p, s) -> p.doubles(s, writePlusOne), assertPlusOne);
        testNumberStreams(doubleStreamSupplier, (p, s) -> p.doubles(s, writePlusOne), assertPlusOne);
    }

    @Test
    void testDataWriter() {
        double[] data = {1, 2, 3};
        DoubleDataWriter dataWriter = (pen, i) -> pen.doubles(i*2);
        List<Double> transformedData = Arrays.stream(data)
                                           .map(i->i*2)
                                           .boxed()
                                           .collect(Collectors.toList());
        transformedData.add((double) (4*2));
        Queue<Object> result = newPen().doubles(data, dataWriter).doubles(4, dataWriter).queue();
        Assertions.assertEquals(transformedData, result);

        Iterable<Double> iterableData = DoubleStream.of(data).boxed().collect(Collectors.toList());
        result = newPen().doubles(iterableData, dataWriter).doubles(4, dataWriter).queue();
        Assertions.assertEquals(transformedData, result);
    }
}
