package novel.api.types.write;

import novel.testutil.DataPenQueue;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class DataPenTest {

    DataPenQueue newPen() {
        return new DataPenQueue();
    }

    /*interface PleaseWork<A, B> {
        void accept(A a, B... b);
    }

    @Test
    void intsTest() {
        testVarArgsAndSupplier(
                DataPen::ints,//DataPen#ints(int)
                (DataPen<?> pen, Integer[] ints) -> pen.ints(ints),//DataPen::ints,//DataPen#ints(int...)
                DataPen::ints,//DataPen#ints(Supplier<Integer>)
                1, 2, 3
        );
    }

    <T> void testVarArgsAndSupplier(
            BiConsumer<DataPen<?>, T> single,
            PleaseWork<DataPen<?>, T> varargs,
            BiConsumer<DataPen<?>, Supplier<T>> supplier,
            T... data
    ) {
        var singlePen = newPen();
        for(var d : data) single.accept(singlePen, d);

        var varArgsPen = newPen();
        varargs.accept(varArgsPen, data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplier.accept(supplierPen, ()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }*/

    @Test
    void intsTest() {
        int[] data = {1, 2, 3};
        var singlePen = newPen();
        for(var d : data) singlePen.ints(d);

        var varArgsPen = newPen();
        varArgsPen.ints(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.ints(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void shortsTest() {
        short[] data = {1, 2, 3};
        var singlePen = newPen();
        for(var d : data) singlePen.shorts(d);

        var varArgsPen = newPen();
        varArgsPen.shorts(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.shorts(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }


    @Test
    void charsTest() {
        char[] data = {'a', 'b', 'c'};
        var singlePen = newPen();
        for(var d : data) singlePen.chars(d);

        var varArgsPen = newPen();
        varArgsPen.chars(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.chars(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void boolsTest() {
        boolean[] data = {true, false};
        var singlePen = newPen();
        for(var d : data) singlePen.bools(d);

        var varArgsPen = newPen();
        varArgsPen.bools(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.bools(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void longsTest() {
        long[] data = {0L, 1L, 2L};
        var singlePen = newPen();
        for(var d : data) singlePen.longs(d);

        var varArgsPen = newPen();
        varArgsPen.longs(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.longs(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void bytesTest() {
        byte[] data = {0, 1, 2};
        var singlePen = newPen();
        for(var d : data) singlePen.bytes(d);

        var varArgsPen = newPen();
        varArgsPen.bytes(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.bytes(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void stringsTest() {
        String[] data = {"0", "1", "2"};
        var singlePen = newPen();
        for(var d : data) singlePen.strings(d);

        var varArgsPen = newPen();
        varArgsPen.strings(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.strings(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void doublesTest() {
        double[] data = {1d, 2d, 3d};
        var singlePen = newPen();
        for(var d : data) singlePen.doubles(d);

        var varArgsPen = newPen();
        varArgsPen.doubles(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.doubles(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void floatsTest() {
        float[] data = {1f, 2f, 3f};
        var singlePen = newPen();
        for(var d : data) singlePen.floats(d);

        var varArgsPen = newPen();
        varArgsPen.floats(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.floats(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }

    @Test
    void objectsTest() {
        AutoWriteable[] data = {a->a.ints(1), b->b.strings(2), c->c.longs(3,4)};
        var singlePen = newPen();
        for(var d : data) singlePen.objects(d);

        var varArgsPen = newPen();
        varArgsPen.objects(data);
        Assertions.assertEquals(singlePen.queue(), varArgsPen.queue());

        var supplierPen = newPen();
        for(var d : data) supplierPen.objects(()->d);
        Assertions.assertEquals(singlePen.queue(), supplierPen.queue());
    }


}
